version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: usermgmt-postgres
    environment:
      POSTGRES_DB: usermgmt
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin (Optional - for database management UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: usermgmt-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    profiles:
      - tools  # Use: docker-compose --profile tools up

  # Java API Server (uncomment when ready to containerize)
  # java-api:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: usermgmt-api
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_NAME: usermgmt
  #     DB_USER: postgres
  #     DB_PASSWORD: password123
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  # Node.js Frontend (uncomment when ready to containerize)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: usermgmt-frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     API_BASE_URL: http://java-api:8080
  #   depends_on:
  #     - java-api

volumes:
  postgres_data:

networks:
  default:
    name: usermgmt-network